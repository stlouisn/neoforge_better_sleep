plugins {
  id "dev.architectury.loom" version "${architectury_loom_version}-SNAPSHOT"
  id "architectury-plugin" version "${architectury_plugin_version}-SNAPSHOT"
  id "java-library"
}

architectury { minecraft = minecraft_version }

group = maven_group
version = mod_version

base { archivesName = "${archives_base_name}-${minecraft_version}-neoforge" }

repositories { maven { url = "https://maven.neoforged.net/releases" } }

dependencies {
  minecraft "com.mojang:minecraft:${minecraft_version}"
  neoForge "net.neoforged:neoforge:${neoforge_version}"
  loom {
    if (file("src/main/resources/${archives_base_name}.accesswidener").exists()) {
      accessWidenerPath = file("src/main/resources/${archives_base_name}.accesswidener")
    }
  }
  implementation "org.jetbrains:annotations:latest.release"
}

apply from: "build-mappings.gradle"

if (file("build-dependencies.gradle").exists()) { apply from: "build-dependencies.gradle" }

if (file("src/main/resources/*.mixins.json")) { apply from: "build-mixins.gradle" }

if (file("build-runtime.gradle").exists()) { apply from: "build-runtime.gradle" }

idea {
  module {
    downloadSources = true
    downloadJavadoc = true
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
  it.options.release = 21
  it.options.encoding = "UTF-8"
}

processResources {
  def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
  stringProperties.each { inputs.property(it.key, it.value) }
  ["META-INF/neoforge.mods.toml"].each {
    filesMatching(it) {
      expand(stringProperties) { escapeBackslash = true }
    }
  }
}

jar {
  manifest {
    attributes(
        [
            "Specification-Title"     : mod_id,
            "Specification-Vendor"    : mod_authors,
            "Specification-Version"   : "1",
            "Implementation-Title"    : mod_name,
            "Implementation-Version"  : mod_version,
            "Implementation-Vendor"   : mod_authors,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ]
    )
  }
}

remapJar { destinationDirectory.set(file("${rootDir}/files")) }