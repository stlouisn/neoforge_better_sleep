buildscript {
	repositories {
		jcenter()
		mavenCentral()
	}
}

plugins {
	id 'fabric-loom' version '0.8-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "1.1.0"
	id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

String unPunctuated = project.mod_name.replaceAll("[',!?]", "")

project.ext {
	ModId = unPunctuated.replace(" ", "")
	mod_id = unPunctuated.toLowerCase().replace(" ", "_")
	archives_base_name = project.ext.mod_id.replace("_", "-")

	minecraft_version_list = project.minecraft_versions.split(",")
	min_minecraft_version = project.ext.minecraft_version_list[0]
	minecraft_version = project.ext.minecraft_version_list[project.ext.minecraft_version_list.size() - 1]
}

String mc_ver_suffix = "+MC" + ((project.ext.minecraft_version_list.size() > 1 ?
		project.ext.min_minecraft_version + "-" : "") +
		project.ext.minecraft_version)

version = project.mod_version + mc_ver_suffix
archivesBaseName = project.ext.archives_base_name

group = project.maven_group

repositories {
	mavenCentral()
	maven { url "https://server.bbkr.space/artifactory/libs-release" }

	maven {
		name = 'CrowdinTranslate source'
		url = "https://minecraft.guntram.de/maven/"
	}

	maven { url "https://maven.shedaniel.me/" }

	maven {
		name = "Terraformers"
//		url = "https://maven.terraformersmc.com/releases/"
		url = "https://maven.kotlindiscord.com/repository/terraformers/"
	}

	maven {
		name = "CurseMaven"
		url = "https://www.cursemaven.com"
	}

	//JITPACK MUST BE LAST!
	maven {
		name "jitpack"
		url "https://jitpack.io"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:" + project.ext.minecraft_version
	mappings "net.fabricmc:yarn:" + project.yarn_mappings
	modImplementation "net.fabricmc:fabric-loader:" + project.loader_version

	// FAPI
	modImplementation "net.fabricmc.fabric-api:fabric-api:" + project.fabric_api_version

	//Config library
	modApi ("me.sargunvohra.mcmods:autoconfig1u:" + project.autoconfig_version) { exclude module: 'fabric-api' }
	//Config GUI support
	modApi ("me.shedaniel.cloth:cloth-config-fabric:" + project.cloth_config_version) { exclude module: 'fabric-api' }
	//Config menu support
	modImplementation ("com.terraformersmc:modmenu:" + project.modmenu_version) { exclude module: 'fabric-api' }

	// Translation fetching
	modImplementation "de.guntram.mcmod:crowdin-translate:" + project.crowdin_translate_version
	include "de.guntram.mcmod:crowdin-translate:" + project.crowdin_translate_version
}

processResources {
	inputs.property "version", project.version
	inputs.property "mod_id", project.mod_id

	filesMatching("fabric.mod.json") {
		expand ([
				"version": project.version,

				"minecraft_version": project.ext.minecraft_version,
				"min_loader_version": project.min_loader_version,

				"mod_id": project.mod_id,
				"ModId": project.ModId,
				"mod_name": project.mod_name,
				"mod_description": project.mod_description,
				"mod_version": project.version,
				"maven_group": project.maven_group,
				"archives_base_name": project.archives_base_name,
				"author": project.author,

				"min_minecraft_version": project.min_minecraft_version,

				"fabric_api_version": project.fabric_api_version,
				"min_fabric_api_version": project.min_fabric_api_version,
				"autoconfig_version": project.autoconfig_version,
				"cloth_config_version": project.cloth_config_version,
				"modmenu_version": project.modmenu_version,
		])
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

import com.modrinth.minotaur.TaskModrinthUpload

import java.util.regex.Matcher
import java.util.regex.Pattern

def readFileFirstLine(String fileName) {
	def firstLine = null
	file(fileName).withReader { reader ->
		def line
		if ((line = reader.readLine()) != null)
			firstLine = line
	}

	return firstLine
}

def readRecentChanges() {
	def newVersionLineRegex = "^(- \\d+\\.\\d+(?:\\.\\d+(?:-[\\da-z]+)?)?" + " \\(\\d{1,2} [A-Z][a-z]{2}\\.? 2021\\): )" + "(.*)"
	Pattern newVersionLinePattern = Pattern.compile(newVersionLineRegex)

	def changelogFile = file("CHANGELOG.md")
	def changes = ""

	changelogFile.withReader { reader ->
		String line
		def firstLine = true
		while ((line = reader.readLine()) != null) {
			if (firstLine) {
				firstLine = false
				if (line.matches(newVersionLineRegex)) {
					Matcher lineMatcher = newVersionLinePattern.matcher(line)
					lineMatcher.find()
					if (!lineMatcher.group(1).startsWith(project.mod_version, 2))
						throw new Exception("Version on first line of changelog doesn't match mod_version. ")
					def trimmedLine = lineMatcher.group(2)
					if (!trimmedLine.isEmpty())changes += trimmedLine + "\n\n"
				} else throw new Exception("First line of changelog is not new version line. ")
			} else if (!line.matches(newVersionLineRegex)) {
				changes += line + "\n\n"
			} else break
		}
	}

	changes += "\n\nA cumulative changelog can be found [here](https://gitlab.com/supersaiyansubtlety/${project.ext.mod_id}/-/blob/master/CHANGELOG.md)"

	return changes
}

curseforge {
	def curseApiKey = readFileFirstLine("..\\CURSE_API_KEY.secret")
	if (curseApiKey != null) {
		apiKey = curseApiKey
		project {
			id = project.curseforge_id
			releaseType = mod_version.endsWith("a") ? "alpha" : mod_version.endsWith("b") ? "beta" : "release"
			project.ext.minecraft_version_list.each { String game_version -> addGameVersion game_version }
			addGameVersion "Fabric"

			changelogType = "markdown"
			changelog = readRecentChanges()
			relations {
				requiredDependency "fabric-api"
			}
			mainArtifact(remapJar.archivePath) { }

			afterEvaluate {
				uploadTask.dependsOn("build")
			}
		}
	}
	options {
		forgeGradleIntegration = false
		javaVersionAutoDetect = false
	}
}

task modrinth(type: TaskModrinthUpload) {
	token = readFileFirstLine("..\\MODRINTH_TOKEN.secret") // Use an environment property!
	projectId = project.modrinth_id
	versionNumber = project.version
	uploadFile = remapJar.archivePath // This is the java jar task
	changelog = readRecentChanges()
	project.ext.minecraft_version_list.each { String game_version -> addGameVersion(game_version) }
	addLoader('fabric')
}

task publishMod {
	dependsOn = ["modrinth", "curseforge"]
}

